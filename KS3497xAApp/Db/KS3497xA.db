# Keysight3497xA.db

# Database file for Keysight 3497xA temperature monitor

# Wayne Lewis
# 2019-04-23

record(stringin,"$(P)$(R)Model_RBV") {
    field(DESC, "ID string")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))Model")
}

record(stringin,"$(P)$(R)SN_RBV") {
    field(DESC, "Serial number")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))SerialNumber")
}

record(stringin,"$(P)$(R)Manufacturer_RBV") {
    field(DESC, "Manufacturer")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))Manufacturer")
}

record(stringin,"$(P)$(R)IDN_RBV") {
    field(DESC, "IDN response")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))IDN")
}

record(stringin,"$(P)$(R)Card1Type_RBV") {
    field(DESC, "Card 1 type")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))Card1Type")
}

record(stringin,"$(P)$(R)Card2Type_RBV") {
    field(DESC, "Card 2 type")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))Card2Type")
}

record(stringin,"$(P)$(R)Card3Type_RBV") {
    field(DESC, "Card 3 type")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))Card3Type")
}

record(stringin,"$(P)$(R)LastErrorMessage_RBV") {
    field(DESC, "Last error")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))LastErrorMessage")
}

record(longin,"$(P)$(R)LastErrorCode_RBV") {
    field(DESC, "Last error code")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0))LastErrorCode")
}

record(stringin,"$(P)$(R)ErrorMessage_RBV") {
    field(DESC, "Current error")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynOctetRead")
    field(INP,  "@asyn($(PORT),$(ADDR=0))ErrorMessage")
}

record(longin,"$(P)$(R)ErrorCode_RBV") {
    field(DESC, "Current error code")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0))ErrorCode")
}

record(ai,"$(P)$(R)NumDataPoints_RBV") {
    field(DESC, "Number of saved data points")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynInt32")
    field(INP,  "@asyn($(PORT),$(ADDR=0))NumDataPoints")
}

record(mbbo, "$(P)$(R)TrigSrc_SEL") {
    field(DESC, "Trigger source")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0))TriggerSource")
	field(PINI, "YES")
    field(ZRVL, "0")
    field(ZRST, "Bus")
    field(ONVL, "1")
    field(ONST, "Immediate")
    field(TWVL, "2")
    field(TWST, "External")
    field(THVL, "3")
    field(THST, "Alarm 1")
    field(FRVL, "4")
    field(FRST, "Alarm 2")
    field(FVVL, "5")
    field(FVST, "Alarm 3")
    field(SXVL, "6")
    field(SXST, "Alarm 4")
    field(SVVL, "7")
    field(SVST, "Timer")
    field(FLNK, "$(P)$(R)TrigSrc_RBV")

	info(autosaveFields, "VAL")
}

record(mbbo, "$(P)$(R)Card1MonSelect01_16") {
    field(DESC, "Card 1 monitor 1-16 selection")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(CARD=1))CardMonSelect")
    field(ZRST, "Channel 1")
    field(ZRVL, "1")
    field(ONST, "Channel 2")
    field(ONVL, "2")
    field(TWST, "Channel 3")
    field(TWVL, "3")
    field(THST, "Channel 4")
    field(THVL, "4")
    field(FRST, "Channel 5")
    field(FRVL, "5")
    field(FVST, "Channel 6")
    field(FVVL, "6")
    field(SXST, "Channel 7")
    field(SXVL, "7")
    field(SVST, "Channel 8")
    field(SVVL, "8")
    field(EIST, "Channel 9")
    field(EIVL, "9")
    field(NIST, "Channel 10")
    field(NIVL, "10")
    field(TEST, "Channel 11")
    field(TEVL, "11")
    field(ELST, "Channel 12")
    field(ELVL, "12")
    field(TVST, "Channel 13")
    field(TVVL, "13")
    field(TTST, "Channel 14")
    field(TTVL, "14")
    field(FTST, "Channel 15")
    field(FTVL, "15")
    field(FFST, "Channel 16")
    field(FFVL, "16")
}

record(bo, "$(P)$(R)Monitor_CMD") {
    field(DESC, "Monitor control")
    field(DTYP, "asynInt32")
    field(OUT,  "@asyn($(PORT),$(ADDR=0))MonOnOff")
    field(ZNAM, "Off")
    field(ONAM, "On")
}

record(ai, "$(P)$(R)Monitor_RBV") {
    field(DESC, "Monitor value")
    field(SCAN, "I/O Intr")
    field(DTYP, "asynFloat64")
    field(INP,  "@asyn($(PORT),$(ADDR=0))MonVal")
    field(PREC, "4")
}

record(mbbi, "$(P)$(R)TrigSrc_RBV") {
    field(DESC, "Trigger source")
    #field(DTYP, "stream")
    #field(PINI, "YES")
    #field(INP,  "@Keysight3497xA.proto getTrigSource $(PORT)")
    field(ZRVL, "0")
    field(ZRST, "BUS")
    field(ONVL, "1")
    field(ONST, "IMM")
    field(TWVL, "2")
    field(TWST, "EXT")
    field(THVL, "3")
    field(THST, "ALAR1")
    field(FRVL, "4")
    field(FRST, "ALAR2")
    field(FVVL, "5")
    field(FVST, "ALAR3")
    field(SXVL, "6")
    field(SXST, "ALAR4")
    field(SVVL, "7")
    field(SVST, "TIM")
}

record(ao, "$(P)$(R)ScanInterval_SP") {
	field(DESC, "Scan interval time")
	field(DTYP, "asynFloat64")
	field(OUT,  "@asyn($(PORT),$(ADDR=0))ScanInterval")
	field(PINI, "YES")
	field(EGU,  "s")
	field(PREC, "3")
	field(DRVL, "0")
	field(DRVH, "359999")

	info(autosaveFields, "VAL")
}

record(ao, "$(P)$(R)ScanCount_SP") {
	field(DESC, "Scan counts")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR=0))ScanCount")
	field(PINI, "YES")
	field(SDIS, "$(P)$(R)ScanContinuous_SEL")
	field(DISV, "1")

	info(autosaveFields, "VAL")
}

record(bo, "$(P)$(R)ScanContinuous_SEL") {
	field(DESC, "Scan forever")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR=0))ScanContinuous")
	field(PINI, "YES")
	field(ZNAM, "Use counts")
	field(ONAM, "Continuous scanning")

	info(autosaveFields, "VAL")
}

record(bo, "$(P)$(R)ScanStart_CMD") {
	field(DESC, "Scan start")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR=0))ScanStart")
	field(ZNAM, "")
	field(ONAM, "Start")
	field(HIGH, "1")
}

record(bo, "$(P)$(R)ScanAbort_CMD") {
	field(DESC, "Scan abort")
	field(DTYP, "asynInt32")
	field(OUT,  "@asyn($(PORT),$(ADDR=0))ScanAbort")
	field(ZNAM, "")
	field(ONAM, "Abort")
	field(HIGH, "1")
}

record(bi, "$(P)$(R)Scan_STS") {
	field(DESC, "Scan status")
	field(DTYP, "asynInt32")
	field(INP,  "@asyn($(PORT),$(ADDR=0))ScanStatus")
	field(ZNAM, "Not scannign")
	field(ONAM, "Scanning")
}


